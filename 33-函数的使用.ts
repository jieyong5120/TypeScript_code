//函数的使用

let nums1: number[] = [100, 200, 0, 300, 600, 0, 400]

let nums2: number[] = [1000, 0, 900, 500, 700, 800]

//封装函数  让代码复用,减少编写重复代码

//定义函数
function getSum(num: number[]): number {
    let sum: number = 0

    for (let i = 0; i < num.length; i++) {
        sum += num[i]
    }

    return sum  //返回值
}

//调用函数  只有调用函数,函数中的代码才会执行
let sum1: number = getSum(nums1)
let sum2: number = getSum(nums2)

console.log('调用函数,返回数组的和', sum1)
console.log('调用函数,返回数组的和', sum2)


/*
* 函数参数的作用：增加了函数的灵活性、通用性,针对相同的功能,能够适应更多的数据
*
* 形参:声明函数指定的参数,放在声明函数的小括号中
*
* 语法:  形参:类型注解  类似于声明变量,但没有赋值
*
* 作用:指定函数可以接收的数据
*
* 说明:
*   1.根据具体功能,函数的参数可以有多个,参数之间使用逗号来分割
*   2.实参和形参按照顺序,一一对应
*   3.实参必须符合形参的类型要求,否则会报错
* */


/*
* 返回值的作用:将函数内部计算的结果返回,以便使用该结果参与其他的计算
*
* 注意:没有指定函数的返回值,那么函数返回值的默认类型是void(什么,都没有)
* */