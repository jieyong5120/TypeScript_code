console.log('===代码执行===')


function work() {
    console.log('早上9点开始工作')
    console.log('下午6点结束工作')
}

let count: number = 0
count++

work()

console.log('===代码结束执行===')


/*
* 函数调试基本操作：
*   1.在哪个位置打断点
*   2.如何调试
*
* 单步调试:表示执行下一行代码,但是遇到函数调用时,进入函数内部
* 单步跳出:表示跳出当前函数(函数中的代码执行完成),继续执行函数函数调用后的下一行代码
*
* 单步跳过:不会进入方法内部,但方法被执行完了
*
*
* Step Into  会进入你自己写的方法（不会进入官方类库的方法）
* Force Step Into  能够进入所有的方法，比如jdk的方法。  会进入源码部分
*
* Step Out  跳出该方法，返回到该方法被调用处的下一行语句。值得注意的是，该方法已执行完毕。
*
* Smart Step Into  智能单步跟踪
*       当一行代码中有多个函数，想进入其中一个函数调测其他函数不进入调测时，
*       使用该功能可以让调试人员选择进入的函数。
*
* Step Over  程序向下执行一行（如果当前行有方法调用，这个方法将被执行完毕返回，然后到下一行）
*       不进入方法
*
* Drop frame  返回到当前方法的调用处
*       并且所有上下文变量的值也回到那个时候。
*       只要调用链中还有上级方法，可以跳到其中的任何一个方法。
*
* Run To Cursor  运行到光标处
* */